name: Release OpenCTI chart

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "charts/opencti/**"

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@ba330626c4750c19d8299de843f05c7aa5574f62 # v5.0.2
        id: semantic_release
        with:
          dry_run: true
          branch: main
          tag_format: ${version}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Chart version
        id: chart_version
        if: steps.semantic_release.outputs.new_release_published == 'true'
        run: |
          sed -i 's/^version: .*/version: ${{ steps.semantic_release.outputs.new_release_git_tag }}/g' charts/opencti/Chart.yaml
          echo "CHART_VERSION=${{ steps.semantic_release.outputs.new_release_git_tag }}" >> $GITHUB_OUTPUT

      - name: Check if tag exists
        id: tag_exists
        if: steps.semantic_release.outputs.new_release_published == 'true'
        run: |
          TAG_EXISTS=true
          if ! [ $(git tag -l "v${{ steps.chart_version.outputs.CHART_VERSION }}") ]; then
              TAG_EXISTS=false
          fi
          echo TAG_EXISTS=$TAG_EXISTS >> $GITHUB_OUTPUT

      - name: Run chart-releaser
        if: steps.tag_exists.outputs.TAG_EXISTS == 'false'
        uses: helm/chart-releaser-action@cae68fefc6b5f367a0275617c9f83181ba54714f # v1.7.0
        with:
          charts_dir: charts
          config: .github/cr.yaml
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          CR_SKIP_EXISTING: true

      - name: Login in to the Container registry
        if: steps.tag_exists.outputs.TAG_EXISTS == 'false'
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Cosign
        if: steps.tag_exists.outputs.TAG_EXISTS == 'false'
        uses: sigstore/cosign-installer@faadad0cce49287aee09b3a48701e75088a2c6ad # v4.0.0

      - name: Install Oras
        if: steps.tag_exists.outputs.TAG_EXISTS == 'false'
        uses: oras-project/setup-oras@22ce207df3b08e061f537244349aac6ae1d214f6 # v1.2.4

      # ref: https://github.com/backstage/charts/blob/88240ce7a0726e3773ee0e4866fbe6325c15267b/.github/workflows/release.yml#L50
      - name: Publish and Sign OCI Charts
        if: steps.tag_exists.outputs.TAG_EXISTS == 'false'
        run: |
          for chart in `find .cr-release-packages -name '*.tgz' -print`; do
            helm push ${chart} oci://ghcr.io/${GITHUB_REPOSITORY} |& tee helm-push-output.log
            file_name=${chart##*/}
            chart_name=${file_name%-*}
            digest=$(awk -F "[, ]+" '/Digest/{print $NF}' < helm-push-output.log)
            cosign sign -y "ghcr.io/${GITHUB_REPOSITORY}/${chart_name}@${digest}"

            oras push "ghcr.io/${GITHUB_REPOSITORY}/${chart_name}:artifacthub.io" "./charts/${chart_name}/artifacthub-repo.yml:application/vnd.cncf.artifacthub.repository-metadata.layer.v1.yaml"
          done
        env:
          COSIGN_EXPERIMENTAL: 1
